trigger:
- none

pool:
  name: default  # Ensure this matches your self-hosted agent pool

resources:
- repo: self

# variables:
#   dockerRegistryServiceConnection: 'a28ba8d1-6339-4d70-9af9-4bf59bdad1de'
#   containerRegistry: 'ivica890acr.azurecr.io'
#   imagePullSecret: 'ivica890acr1016d349-auth'
#   tag: '$(Build.BuildId)'

#   # Path for Accounts microservice
#   accountsMicroservicePath: 'accounts'  # Replace with your actual path

# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: BuildAccountsMicroservice
#     displayName: Build Accounts Microservice
#     pool:
#       name: default  # Self-hosted agent pool
#     steps:

#     # Authenticate with Azure Container Registry
#     - script: |
#         az acr login --name ivica890acr
#       displayName: 'Login to ACR'

#     # Check Java version before building with Maven
#     - script: |
#         java -version
#       displayName: 'Check Java Version'

#     # Maven build with Jib (no need to install JDK manually)
#     - task: Maven@3
#       displayName: Build Accounts Microservice Docker Image with Jib
#       inputs:
#         mavenPomFile: '$(accountsMicroservicePath)/pom.xml'
#         goals: 'clean compile jib:build'
#         options: '-DskipTests -Dimage=$(containerRegistry)/accounts:$(tag)'

variables:
  dockerRegistryServiceConnection: 'AzureServiceConnection'  # Your service connection name or ID
  containerRegistry: 'ivica890acr.azurecr.io'
  imagePullSecret: 'ivica890acr1016d349-auth'
  tag: '$(Build.BuildId)'

  accountsMicroservicePath: 'accounts'
  helmChartPath: 'helm/services/accounts'
  releaseName: 'accounts-service'
  namespace: 'default'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: BuildAccountsMicroservice
        displayName: Build Accounts Microservice
        pool:
          vmImage: 'ubuntu-latest'  # or 'self-hosted' if you have a custom agent with preinstalled tools
        steps:

          # Authenticate and login to ACR
          - task: AzureCLI@2
            displayName: 'Login to ACR'
            inputs:
              azureSubscription: $(dockerRegistryServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az acr login --name $(containerRegistry | cut -d'.' -f1)

          # Check Java version (Java 21 preinstalled on your agent)
          - script: java -version
            displayName: 'Check Java Version'

          # Maven build with Jib plugin
          - task: Maven@3
            displayName: Build Docker Image with Jib
            inputs:
              mavenPomFile: '$(accountsMicroservicePath)/pom.xml'
              goals: 'clean compile jib:build'
              options: '-DskipTests -Dimage=$(containerRegistry)/accounts:$(tag)'

          # AKS credentials acquisition (using service connection)
          - task: AzureCLI@2
            displayName: 'Login to AKS'
            inputs:
              azureSubscription: $(dockerRegistryServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials --resource-group microservices-rg --name aks-cluster --overwrite-existing

          # Deploy Helm chart (Helm preinstalled on your agent)
          - script: |
              cd $(Build.SourcesDirectory)/$(helmChartPath)
              helm upgrade --install $(releaseName) . --namespace $(namespace) \
                --set image.repository=$(containerRegistry)/accounts \
                --set image.tag=$(tag)
            displayName: 'Deploy with Helm'


# trigger:
# - azure-pipelines

# resources:
# - repo: self

# variables:
#   dockerRegistryServiceConnection: 'a28ba8d1-6339-4d70-9af9-4bf59bdad1de'
#   containerRegistry: 'ivica890acr.azurecr.io'
#   imagePullSecret: 'ivica890acr1016d349-auth'
#   vmImageName: 'ubuntu-latest'
#   tag: '$(Build.BuildId)'

#   # Define paths for each microservice
#   microservice1Path: 'accounts'  # Replace with your actual path
#   # microservice2Path: 'cards'  # Replace with your actual path
#   # microservice3Path: 'loans'  # Replace with your actual path

# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: BuildMicroservice1
#     displayName: Build Microservice 1
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: Maven@3
#       displayName: Build Microservice 1 Docker Image with Jib
#       inputs:
#         mavenPomFile: '$(microservice1Path)/pom.xml'
#         goals: 'clean jib:build -Dimage=$(containerRegistry)/accounts:$(tag)'
#         options: '-DskipTests'

#   # - job: BuildMicroservice2
#   #   displayName: Build Microservice 2
#   #   pool:
#   #     vmImage: $(vmImageName)
#   #   steps:
#   #   - task: Maven@3
#   #     displayName: Build Microservice 2 Docker Image with Jib
#   #     inputs:
#   #       mavenPomFile: '$(microservice2Path)/pom.xml'
#   #       goals: 'clean jib:build -Dimage=$(containerRegistry)/cards:$(tag)'
#   #       options: '-DskipTests'

#   # - job: BuildMicroservice3
#   #   displayName: Build Microservice 3
#   #   pool:
#   #     vmImage: $(vmImageName)
#   #   steps:
#   #   - task: Maven@3
#   #     displayName: Build Microservice 3 Docker Image with Jib
#   #     inputs:
#   #       mavenPomFile: '$(microservice3Path)/pom.xml'
#   #       goals: 'clean jib:build -Dimage=$(containerRegistry)/loans:$(tag)'
#   #       options: '-DskipTests'
#     - upload: manifests
#       artifact: manifests

# # - stage: Deploy
# #   displayName: Deploy stage
# #   dependsOn: Build

# #   jobs:
# #   - deployment: Deploy
# #     condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
# #     displayName: Deploy
# #     pool:
# #       vmImage: $(vmImageName)
# #     environment: 'ivica890microservicestemplate-2531.default'
# #     strategy:
# #       runOnce:
# #         deploy:
# #           steps:
# #           - task: Kubernetes@1
# #             displayName: 'Set up kubectl'
# #             inputs:
# #               connectionType: 'Azure Resource Manager'
# #               azureSubscription: 'Your-Azure-Subscription'
# #               action: 'installKubectl'

# #           - task: HelmInstaller@1
# #             displayName: 'Install Helm'
# #             inputs:
# #               helmVersionToInstall: 'latest'

# #           - task: Kubernetes@1
# #             displayName: 'Create imagePullSecret'
# #             inputs:
# #               command: apply
# #               useConfigurationFile: false
# #               inline: |
# #                 apiVersion: v1
# #                 kind: Secret
# #                 metadata:
# #                   name: $(imagePullSecret)
# #                   namespace: $(k8sNamespaceForPR)
# #                 data:
# #                   .dockerconfigjson: $(dockerRegistryServiceConnection)
# #                 type: kubernetes.io/dockerconfigjson

# #           - task: HelmDeploy@0
# #             displayName: 'Deploy with Helm'
# #             inputs:
# #               connectionType: 'Azure Resource Manager'
# #               azureSubscription: 'Your-Azure-Subscription'
# #               kubernetesCluster: '$(AKS_CLUSTER)'
# #               namespace: $(k8sNamespaceForPR)
# #               command: upgrade
# #               chartType: FilePath
# #               chartPath: $(helmChartPath)
# #               releaseName: '$(imageRepository)-$(tag)'
# #               overrideValues: |
# #                 image.repository=$(containerRegistry)/$(imageRepository)
# #                 image.tag=$(tag)

# #   - deployment: DeployPullRequest
# #     displayName: Deploy Pull request
# #     condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
# #     pool:
# #       vmImage: $(vmImageName)
# #     environment: 'ivica890microservicestemplate-2531.$(k8sNamespaceForPR)'
# #     strategy:
# #       runOnce:
# #         deploy:
# #           steps:
# #           - task: Kubernetes@1
# #             displayName: 'Create a new namespace for the pull request'
# #             inputs:
# #               command: apply
# #               useConfigurationFile: true
# #               inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

# #           - task: HelmDeploy@0
# #             displayName: 'Deploy PR changes with Helm'
# #             inputs:
# #               connectionType: 'Azure Resource Manager'
# #               azureSubscription: 'Your-Azure-Subscription'
# #               kubernetesCluster: '$(AKS_CLUSTER)'
# #               namespace: $(k8sNamespaceForPR)
# #               command: upgrade
# #               chartType: FilePath
# #               chartPath: $(helmChartPath)
# #               releaseName: '$(imageRepository)-$(tag)'
# #               overrideValues: |
# #                 image.repository=$(containerRegistry)/$(imageRepository)
# #                 image.tag=$(tag)
