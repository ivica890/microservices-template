services:

  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      microservices:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.0.0
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - microservices

  minio:
    image: minio/minio:RELEASE.2024-05-27T19-17-46Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - microservices

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
      - microservices

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yaml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yaml:/etc/tempo-config.yaml
    networks:
      - microservices

  grafana:
    image: grafana/grafana:11.0.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
       - microservices

  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - microservices

  gateway:
    image: nginx:1.25.5
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
       - microservices

  ############################

  postgres:
    image: postgres:latest
    container_name: microservices-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - C:\Users\Public\Documents\microservices-template\docker-compose\dev\init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - microservices

  accounts-service:
    image: ivica890/accounts:v8
    container_name: accounts-service
    environment:
      - DB_URL=jdbc:postgresql://microservices-postgres:5432/accounts
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - LOANS_SERVICE_URL=http://loans-service:8070
      - CARDS_SERVICE_URL=http://cards-service:8090
      - JAVA_TOOL_OPTIONS="-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_SERVICE_NAME=accounts-service
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - microservices

  cards-service:
    image: ivica890/cards:v8
    container_name: cards-service
    environment:
      - DB_URL=jdbc:postgresql://microservices-postgres:5432/cards
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - ACCOUNTS_SERVICE_URL=http://accounts-service:8080
      - LOANS_SERVICE_URL=http://loans-service:8070
      - JAVA_TOOL_OPTIONS="-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_SERVICE_NAME=cards-service
    ports:
      - "8090:8090"
    depends_on:
      - postgres
    networks:
      - microservices

  loans-service:
    image: ivica890/loans:v8
    container_name: loans-service
    environment:
      - DB_URL=jdbc:postgresql://microservices-postgres:5432/loans
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - ACCOUNTS_SERVICE_URL=http://accounts-service:8080
      - CARDS_SERVICE_URL=http://cards-service:8090
      - JAVA_TOOL_OPTIONS="-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_SERVICE_NAME=loans-service
    ports:
      - "8070:8070"
    depends_on:
      - postgres
    networks:
      - microservices

  api-gateway:
    image: ivica890/api-gateway2:v8
    container_name: api-gateway
    environment:
      - LOANS_SERVICE_URL=http://loans-service:8070
      - ACCOUNTS_SERVICE_URL=http://accounts-service:8080
      - CARDS_SERVICE_URL=http://cards-service:8090
      - JWK_SET_URI=http://keycloak-auth-server:8080/realms/master/protocol/openid-connect/certs
      - JAVA_TOOL_OPTIONS="-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_SERVICE_NAME=api-gateway


    ports:
      - "8072:8072"
    depends_on:
      - accounts-service
      - loans-service
      - cards-service
#      - keycloak-auth-server
    networks:
      - microservices

  keycloak-auth-server:
    image: quay.io/keycloak/keycloak:26.1.2
    container_name: keycloak-auth-server
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://microservices-postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_DB_VENDOR=postgres
      - KC_HTTP_PORT=8080
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
    ports:
      - "7080:8080"
    command: start-dev
    networks:
      - microservices
    depends_on:
      - postgres

volumes:
  postgres_data:

networks:
  microservices:
